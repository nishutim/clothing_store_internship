{"ast":null,"code":"var appCacheIframe;\n\nfunction hasSW() {\n  return 'serviceWorker' in navigator && (window.location.protocol === 'https:' || window.location.hostname === 'localhost' || window.location.hostname.indexOf('127.') === 0);\n}\n\nfunction install(options) {\n  options || (options = {});\n\n  if (hasSW()) {\n    var registration = navigator.serviceWorker.register(\"/sw.js\", {});\n\n    var handleUpdating = function (registration) {\n      var sw = registration.installing || registration.waiting;\n      var ignoreInstalling;\n      var ignoreWaiting; // No SW or already handled\n\n      if (!sw || sw.onstatechange) return;\n      var stateChangeHandler; // Already has SW\n\n      if (registration.active) {\n        onUpdateStateChange();\n        stateChangeHandler = onUpdateStateChange;\n      } else {\n        onInstallStateChange();\n        stateChangeHandler = onInstallStateChange;\n      }\n\n      ignoreInstalling = true;\n\n      if (registration.waiting) {\n        ignoreWaiting = true;\n      }\n\n      sw.onstatechange = stateChangeHandler;\n\n      function onUpdateStateChange() {\n        switch (sw.state) {\n          case 'redundant':\n            {\n              sendEvent('onUpdateFailed');\n              sw.onstatechange = null;\n            }\n            break;\n\n          case 'installing':\n            {\n              if (!ignoreInstalling) {\n                sendEvent('onUpdating');\n              }\n            }\n            break;\n\n          case 'installed':\n            {\n              if (!ignoreWaiting) {\n                sendEvent('onUpdateReady');\n              }\n            }\n            break;\n\n          case 'activated':\n            {\n              sendEvent('onUpdated');\n              sw.onstatechange = null;\n            }\n            break;\n        }\n      }\n\n      function onInstallStateChange() {\n        switch (sw.state) {\n          case 'redundant':\n            {\n              // Failed to install, ignore\n              sw.onstatechange = null;\n            }\n            break;\n\n          case 'installing':\n            {// Installing, ignore\n            }\n            break;\n\n          case 'installed':\n            {// Installed, wait activation\n            }\n            break;\n\n          case 'activated':\n            {\n              sendEvent('onInstalled');\n              sw.onstatechange = null;\n            }\n            break;\n        }\n      }\n    };\n\n    var sendEvent = function (event) {\n      if (typeof options[event] === 'function') {\n        options[event]({\n          source: 'ServiceWorker'\n        });\n      }\n    };\n\n    registration.then(function (reg) {\n      // WTF no reg?\n      if (!reg) return; // Installed but Shift-Reloaded (page is not controller by SW),\n      // update might be ready at this point (more than one tab opened).\n      // Anyway, if page is hard-reloaded, then it probably already have latest version\n      // but it's not controlled by SW yet. Applying update will claim this page\n      // to be controlled by SW. Maybe set flag to not reload it?\n      // if (!navigator.serviceWorker.controller) return;\n\n      handleUpdating(reg);\n\n      reg.onupdatefound = function () {\n        handleUpdating(reg);\n      };\n    }).catch(function (err) {\n      sendEvent('onError');\n      return Promise.reject(err);\n    });\n    return;\n  }\n}\n\nfunction applyUpdate(callback, errback) {\n  if (hasSW()) {\n    navigator.serviceWorker.getRegistration().then(function (registration) {\n      if (!registration || !registration.waiting) {\n        errback && errback();\n        return;\n      }\n\n      registration.waiting.postMessage({\n        action: 'skipWaiting'\n      });\n      callback && callback();\n    });\n    return;\n  }\n}\n\nfunction update() {\n  if (hasSW()) {\n    navigator.serviceWorker.getRegistration().then(function (registration) {\n      if (!registration) return;\n      return registration.update();\n    });\n  }\n}\n\nsetInterval(update, 120000);\nexports.install = install;\nexports.applyUpdate = applyUpdate;\nexports.update = update;","map":null,"metadata":{},"sourceType":"script"}